// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_workbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_workbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_workbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_workbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workbook_2eproto;
namespace nik_tutorial {
class AccidentDetails;
class AccidentDetailsDefaultTypeInternal;
extern AccidentDetailsDefaultTypeInternal _AccidentDetails_default_instance_;
class Bike;
class BikeDefaultTypeInternal;
extern BikeDefaultTypeInternal _Bike_default_instance_;
class BikeDetails;
class BikeDetailsDefaultTypeInternal;
extern BikeDetailsDefaultTypeInternal _BikeDetails_default_instance_;
class IncidentSummary;
class IncidentSummaryDefaultTypeInternal;
extern IncidentSummaryDefaultTypeInternal _IncidentSummary_default_instance_;
class InsuranceNumber;
class InsuranceNumberDefaultTypeInternal;
extern InsuranceNumberDefaultTypeInternal _InsuranceNumber_default_instance_;
class WorkBook;
class WorkBookDefaultTypeInternal;
extern WorkBookDefaultTypeInternal _WorkBook_default_instance_;
}  // namespace nik_tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::nik_tutorial::AccidentDetails* Arena::CreateMaybeMessage<::nik_tutorial::AccidentDetails>(Arena*);
template<> ::nik_tutorial::Bike* Arena::CreateMaybeMessage<::nik_tutorial::Bike>(Arena*);
template<> ::nik_tutorial::BikeDetails* Arena::CreateMaybeMessage<::nik_tutorial::BikeDetails>(Arena*);
template<> ::nik_tutorial::IncidentSummary* Arena::CreateMaybeMessage<::nik_tutorial::IncidentSummary>(Arena*);
template<> ::nik_tutorial::InsuranceNumber* Arena::CreateMaybeMessage<::nik_tutorial::InsuranceNumber>(Arena*);
template<> ::nik_tutorial::WorkBook* Arena::CreateMaybeMessage<::nik_tutorial::WorkBook>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nik_tutorial {

enum RideType : int {
  STREET = 1,
  CRUISER = 2,
  RACING = 3,
  RideType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RideType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RideType_IsValid(int value);
constexpr RideType RideType_MIN = STREET;
constexpr RideType RideType_MAX = RACING;
constexpr int RideType_ARRAYSIZE = RideType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RideType_descriptor();
template<typename T>
inline const std::string& RideType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RideType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RideType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RideType_descriptor(), enum_t_value);
}
inline bool RideType_Parse(
    const std::string& name, RideType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RideType>(
    RideType_descriptor(), name, value);
}
// ===================================================================

class BikeDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nik_tutorial.BikeDetails) */ {
 public:
  BikeDetails();
  virtual ~BikeDetails();

  BikeDetails(const BikeDetails& from);
  BikeDetails(BikeDetails&& from) noexcept
    : BikeDetails() {
    *this = ::std::move(from);
  }

  inline BikeDetails& operator=(const BikeDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline BikeDetails& operator=(BikeDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BikeDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BikeDetails* internal_default_instance() {
    return reinterpret_cast<const BikeDetails*>(
               &_BikeDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BikeDetails& a, BikeDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(BikeDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BikeDetails* New() const final {
    return CreateMaybeMessage<BikeDetails>(nullptr);
  }

  BikeDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BikeDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BikeDetails& from);
  void MergeFrom(const BikeDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BikeDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nik_tutorial.BikeDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workbook_2eproto);
    return ::descriptor_table_workbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kModelFieldNumber = 3,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string model = 3;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nik_tutorial.BikeDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workbook_2eproto;
};
// -------------------------------------------------------------------

class InsuranceNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nik_tutorial.InsuranceNumber) */ {
 public:
  InsuranceNumber();
  virtual ~InsuranceNumber();

  InsuranceNumber(const InsuranceNumber& from);
  InsuranceNumber(InsuranceNumber&& from) noexcept
    : InsuranceNumber() {
    *this = ::std::move(from);
  }

  inline InsuranceNumber& operator=(const InsuranceNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsuranceNumber& operator=(InsuranceNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsuranceNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsuranceNumber* internal_default_instance() {
    return reinterpret_cast<const InsuranceNumber*>(
               &_InsuranceNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InsuranceNumber& a, InsuranceNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(InsuranceNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsuranceNumber* New() const final {
    return CreateMaybeMessage<InsuranceNumber>(nullptr);
  }

  InsuranceNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsuranceNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsuranceNumber& from);
  void MergeFrom(const InsuranceNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsuranceNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nik_tutorial.InsuranceNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workbook_2eproto);
    return ::descriptor_table_workbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // @@protoc_insertion_point(class_scope:nik_tutorial.InsuranceNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workbook_2eproto;
};
// -------------------------------------------------------------------

class AccidentDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nik_tutorial.AccidentDetails) */ {
 public:
  AccidentDetails();
  virtual ~AccidentDetails();

  AccidentDetails(const AccidentDetails& from);
  AccidentDetails(AccidentDetails&& from) noexcept
    : AccidentDetails() {
    *this = ::std::move(from);
  }

  inline AccidentDetails& operator=(const AccidentDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccidentDetails& operator=(AccidentDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccidentDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccidentDetails* internal_default_instance() {
    return reinterpret_cast<const AccidentDetails*>(
               &_AccidentDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccidentDetails& a, AccidentDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(AccidentDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccidentDetails* New() const final {
    return CreateMaybeMessage<AccidentDetails>(nullptr);
  }

  AccidentDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccidentDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccidentDetails& from);
  void MergeFrom(const AccidentDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccidentDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nik_tutorial.AccidentDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workbook_2eproto);
    return ::descriptor_table_workbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kLocationFieldNumber = 2,
    kDamagedPartsFieldNumber = 3,
    kInsurancesFieldNumber = 4,
  };
  // string date = 1;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string location = 2;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string damaged_parts = 3;
  void clear_damaged_parts();
  const std::string& damaged_parts() const;
  void set_damaged_parts(const std::string& value);
  void set_damaged_parts(std::string&& value);
  void set_damaged_parts(const char* value);
  void set_damaged_parts(const char* value, size_t size);
  std::string* mutable_damaged_parts();
  std::string* release_damaged_parts();
  void set_allocated_damaged_parts(std::string* damaged_parts);
  private:
  const std::string& _internal_damaged_parts() const;
  void _internal_set_damaged_parts(const std::string& value);
  std::string* _internal_mutable_damaged_parts();
  public:

  // .nik_tutorial.InsuranceNumber insurances = 4;
  bool has_insurances() const;
  private:
  bool _internal_has_insurances() const;
  public:
  void clear_insurances();
  const ::nik_tutorial::InsuranceNumber& insurances() const;
  ::nik_tutorial::InsuranceNumber* release_insurances();
  ::nik_tutorial::InsuranceNumber* mutable_insurances();
  void set_allocated_insurances(::nik_tutorial::InsuranceNumber* insurances);
  private:
  const ::nik_tutorial::InsuranceNumber& _internal_insurances() const;
  ::nik_tutorial::InsuranceNumber* _internal_mutable_insurances();
  public:

  // @@protoc_insertion_point(class_scope:nik_tutorial.AccidentDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr damaged_parts_;
  ::nik_tutorial::InsuranceNumber* insurances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workbook_2eproto;
};
// -------------------------------------------------------------------

class IncidentSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nik_tutorial.IncidentSummary) */ {
 public:
  IncidentSummary();
  virtual ~IncidentSummary();

  IncidentSummary(const IncidentSummary& from);
  IncidentSummary(IncidentSummary&& from) noexcept
    : IncidentSummary() {
    *this = ::std::move(from);
  }

  inline IncidentSummary& operator=(const IncidentSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentSummary& operator=(IncidentSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncidentSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncidentSummary* internal_default_instance() {
    return reinterpret_cast<const IncidentSummary*>(
               &_IncidentSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IncidentSummary& a, IncidentSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidentSummary* New() const final {
    return CreateMaybeMessage<IncidentSummary>(nullptr);
  }

  IncidentSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidentSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncidentSummary& from);
  void MergeFrom(const IncidentSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidentSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nik_tutorial.IncidentSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workbook_2eproto);
    return ::descriptor_table_workbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalExpenseFieldNumber = 1,
  };
  // int32 total_expense = 1;
  void clear_total_expense();
  ::PROTOBUF_NAMESPACE_ID::int32 total_expense() const;
  void set_total_expense(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_expense() const;
  void _internal_set_total_expense(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nik_tutorial.IncidentSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_expense_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workbook_2eproto;
};
// -------------------------------------------------------------------

class Bike :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nik_tutorial.Bike) */ {
 public:
  Bike();
  virtual ~Bike();

  Bike(const Bike& from);
  Bike(Bike&& from) noexcept
    : Bike() {
    *this = ::std::move(from);
  }

  inline Bike& operator=(const Bike& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bike& operator=(Bike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bike& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bike* internal_default_instance() {
    return reinterpret_cast<const Bike*>(
               &_Bike_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Bike& a, Bike& b) {
    a.Swap(&b);
  }
  inline void Swap(Bike* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bike* New() const final {
    return CreateMaybeMessage<Bike>(nullptr);
  }

  Bike* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bike>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bike& from);
  void MergeFrom(const Bike& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bike* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nik_tutorial.Bike";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workbook_2eproto);
    return ::descriptor_table_workbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsurancesFieldNumber = 3,
    kReportsFieldNumber = 4,
    kExpensesFieldNumber = 5,
    kDetailsFieldNumber = 1,
    kLastUpdatedFieldNumber = 6,
    kRidetypeFieldNumber = 2,
  };
  // repeated .nik_tutorial.InsuranceNumber insurances = 3;
  int insurances_size() const;
  private:
  int _internal_insurances_size() const;
  public:
  void clear_insurances();
  ::nik_tutorial::InsuranceNumber* mutable_insurances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::InsuranceNumber >*
      mutable_insurances();
  private:
  const ::nik_tutorial::InsuranceNumber& _internal_insurances(int index) const;
  ::nik_tutorial::InsuranceNumber* _internal_add_insurances();
  public:
  const ::nik_tutorial::InsuranceNumber& insurances(int index) const;
  ::nik_tutorial::InsuranceNumber* add_insurances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::InsuranceNumber >&
      insurances() const;

  // repeated .nik_tutorial.AccidentDetails reports = 4;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::nik_tutorial::AccidentDetails* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::AccidentDetails >*
      mutable_reports();
  private:
  const ::nik_tutorial::AccidentDetails& _internal_reports(int index) const;
  ::nik_tutorial::AccidentDetails* _internal_add_reports();
  public:
  const ::nik_tutorial::AccidentDetails& reports(int index) const;
  ::nik_tutorial::AccidentDetails* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::AccidentDetails >&
      reports() const;

  // repeated .nik_tutorial.IncidentSummary expenses = 5;
  int expenses_size() const;
  private:
  int _internal_expenses_size() const;
  public:
  void clear_expenses();
  ::nik_tutorial::IncidentSummary* mutable_expenses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::IncidentSummary >*
      mutable_expenses();
  private:
  const ::nik_tutorial::IncidentSummary& _internal_expenses(int index) const;
  ::nik_tutorial::IncidentSummary* _internal_add_expenses();
  public:
  const ::nik_tutorial::IncidentSummary& expenses(int index) const;
  ::nik_tutorial::IncidentSummary* add_expenses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::IncidentSummary >&
      expenses() const;

  // .nik_tutorial.BikeDetails details = 1;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::nik_tutorial::BikeDetails& details() const;
  ::nik_tutorial::BikeDetails* release_details();
  ::nik_tutorial::BikeDetails* mutable_details();
  void set_allocated_details(::nik_tutorial::BikeDetails* details);
  private:
  const ::nik_tutorial::BikeDetails& _internal_details() const;
  ::nik_tutorial::BikeDetails* _internal_mutable_details();
  public:

  // .google.protobuf.Timestamp last_updated = 6;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:

  // .nik_tutorial.RideType ridetype = 2;
  void clear_ridetype();
  ::nik_tutorial::RideType ridetype() const;
  void set_ridetype(::nik_tutorial::RideType value);
  private:
  ::nik_tutorial::RideType _internal_ridetype() const;
  void _internal_set_ridetype(::nik_tutorial::RideType value);
  public:

  // @@protoc_insertion_point(class_scope:nik_tutorial.Bike)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::InsuranceNumber > insurances_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::AccidentDetails > reports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::IncidentSummary > expenses_;
  ::nik_tutorial::BikeDetails* details_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  int ridetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workbook_2eproto;
};
// -------------------------------------------------------------------

class WorkBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nik_tutorial.WorkBook) */ {
 public:
  WorkBook();
  virtual ~WorkBook();

  WorkBook(const WorkBook& from);
  WorkBook(WorkBook&& from) noexcept
    : WorkBook() {
    *this = ::std::move(from);
  }

  inline WorkBook& operator=(const WorkBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkBook& operator=(WorkBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkBook* internal_default_instance() {
    return reinterpret_cast<const WorkBook*>(
               &_WorkBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WorkBook& a, WorkBook& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkBook* New() const final {
    return CreateMaybeMessage<WorkBook>(nullptr);
  }

  WorkBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkBook& from);
  void MergeFrom(const WorkBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nik_tutorial.WorkBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workbook_2eproto);
    return ::descriptor_table_workbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBikesFieldNumber = 1,
  };
  // repeated .nik_tutorial.Bike bikes = 1;
  int bikes_size() const;
  private:
  int _internal_bikes_size() const;
  public:
  void clear_bikes();
  ::nik_tutorial::Bike* mutable_bikes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::Bike >*
      mutable_bikes();
  private:
  const ::nik_tutorial::Bike& _internal_bikes(int index) const;
  ::nik_tutorial::Bike* _internal_add_bikes();
  public:
  const ::nik_tutorial::Bike& bikes(int index) const;
  ::nik_tutorial::Bike* add_bikes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::Bike >&
      bikes() const;

  // @@protoc_insertion_point(class_scope:nik_tutorial.WorkBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::Bike > bikes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BikeDetails

// string name = 1;
inline void BikeDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BikeDetails::name() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.BikeDetails.name)
  return _internal_name();
}
inline void BikeDetails::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.BikeDetails.name)
}
inline std::string* BikeDetails::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.BikeDetails.name)
  return _internal_mutable_name();
}
inline const std::string& BikeDetails::_internal_name() const {
  return name_.GetNoArena();
}
inline void BikeDetails::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BikeDetails::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nik_tutorial.BikeDetails.name)
}
inline void BikeDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nik_tutorial.BikeDetails.name)
}
inline void BikeDetails::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nik_tutorial.BikeDetails.name)
}
inline std::string* BikeDetails::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BikeDetails::release_name() {
  // @@protoc_insertion_point(field_release:nik_tutorial.BikeDetails.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BikeDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.BikeDetails.name)
}

// int32 id = 2;
inline void BikeDetails::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BikeDetails::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BikeDetails::id() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.BikeDetails.id)
  return _internal_id();
}
inline void BikeDetails::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BikeDetails::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.BikeDetails.id)
}

// string model = 3;
inline void BikeDetails::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BikeDetails::model() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.BikeDetails.model)
  return _internal_model();
}
inline void BikeDetails::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.BikeDetails.model)
}
inline std::string* BikeDetails::mutable_model() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.BikeDetails.model)
  return _internal_mutable_model();
}
inline const std::string& BikeDetails::_internal_model() const {
  return model_.GetNoArena();
}
inline void BikeDetails::_internal_set_model(const std::string& value) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BikeDetails::set_model(std::string&& value) {
  
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nik_tutorial.BikeDetails.model)
}
inline void BikeDetails::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nik_tutorial.BikeDetails.model)
}
inline void BikeDetails::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nik_tutorial.BikeDetails.model)
}
inline std::string* BikeDetails::_internal_mutable_model() {
  
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BikeDetails::release_model() {
  // @@protoc_insertion_point(field_release:nik_tutorial.BikeDetails.model)
  
  return model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BikeDetails::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.BikeDetails.model)
}

// -------------------------------------------------------------------

// InsuranceNumber

// string number = 1;
inline void InsuranceNumber::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InsuranceNumber::number() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.InsuranceNumber.number)
  return _internal_number();
}
inline void InsuranceNumber::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.InsuranceNumber.number)
}
inline std::string* InsuranceNumber::mutable_number() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.InsuranceNumber.number)
  return _internal_mutable_number();
}
inline const std::string& InsuranceNumber::_internal_number() const {
  return number_.GetNoArena();
}
inline void InsuranceNumber::_internal_set_number(const std::string& value) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InsuranceNumber::set_number(std::string&& value) {
  
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nik_tutorial.InsuranceNumber.number)
}
inline void InsuranceNumber::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nik_tutorial.InsuranceNumber.number)
}
inline void InsuranceNumber::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nik_tutorial.InsuranceNumber.number)
}
inline std::string* InsuranceNumber::_internal_mutable_number() {
  
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InsuranceNumber::release_number() {
  // @@protoc_insertion_point(field_release:nik_tutorial.InsuranceNumber.number)
  
  return number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InsuranceNumber::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.InsuranceNumber.number)
}

// -------------------------------------------------------------------

// AccidentDetails

// string date = 1;
inline void AccidentDetails::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccidentDetails::date() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.AccidentDetails.date)
  return _internal_date();
}
inline void AccidentDetails::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.AccidentDetails.date)
}
inline std::string* AccidentDetails::mutable_date() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.AccidentDetails.date)
  return _internal_mutable_date();
}
inline const std::string& AccidentDetails::_internal_date() const {
  return date_.GetNoArena();
}
inline void AccidentDetails::_internal_set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccidentDetails::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nik_tutorial.AccidentDetails.date)
}
inline void AccidentDetails::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nik_tutorial.AccidentDetails.date)
}
inline void AccidentDetails::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nik_tutorial.AccidentDetails.date)
}
inline std::string* AccidentDetails::_internal_mutable_date() {
  
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccidentDetails::release_date() {
  // @@protoc_insertion_point(field_release:nik_tutorial.AccidentDetails.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccidentDetails::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.AccidentDetails.date)
}

// string location = 2;
inline void AccidentDetails::clear_location() {
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccidentDetails::location() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.AccidentDetails.location)
  return _internal_location();
}
inline void AccidentDetails::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.AccidentDetails.location)
}
inline std::string* AccidentDetails::mutable_location() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.AccidentDetails.location)
  return _internal_mutable_location();
}
inline const std::string& AccidentDetails::_internal_location() const {
  return location_.GetNoArena();
}
inline void AccidentDetails::_internal_set_location(const std::string& value) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccidentDetails::set_location(std::string&& value) {
  
  location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nik_tutorial.AccidentDetails.location)
}
inline void AccidentDetails::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nik_tutorial.AccidentDetails.location)
}
inline void AccidentDetails::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nik_tutorial.AccidentDetails.location)
}
inline std::string* AccidentDetails::_internal_mutable_location() {
  
  return location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccidentDetails::release_location() {
  // @@protoc_insertion_point(field_release:nik_tutorial.AccidentDetails.location)
  
  return location_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccidentDetails::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.AccidentDetails.location)
}

// string damaged_parts = 3;
inline void AccidentDetails::clear_damaged_parts() {
  damaged_parts_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccidentDetails::damaged_parts() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.AccidentDetails.damaged_parts)
  return _internal_damaged_parts();
}
inline void AccidentDetails::set_damaged_parts(const std::string& value) {
  _internal_set_damaged_parts(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.AccidentDetails.damaged_parts)
}
inline std::string* AccidentDetails::mutable_damaged_parts() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.AccidentDetails.damaged_parts)
  return _internal_mutable_damaged_parts();
}
inline const std::string& AccidentDetails::_internal_damaged_parts() const {
  return damaged_parts_.GetNoArena();
}
inline void AccidentDetails::_internal_set_damaged_parts(const std::string& value) {
  
  damaged_parts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccidentDetails::set_damaged_parts(std::string&& value) {
  
  damaged_parts_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nik_tutorial.AccidentDetails.damaged_parts)
}
inline void AccidentDetails::set_damaged_parts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  damaged_parts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nik_tutorial.AccidentDetails.damaged_parts)
}
inline void AccidentDetails::set_damaged_parts(const char* value, size_t size) {
  
  damaged_parts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nik_tutorial.AccidentDetails.damaged_parts)
}
inline std::string* AccidentDetails::_internal_mutable_damaged_parts() {
  
  return damaged_parts_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccidentDetails::release_damaged_parts() {
  // @@protoc_insertion_point(field_release:nik_tutorial.AccidentDetails.damaged_parts)
  
  return damaged_parts_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccidentDetails::set_allocated_damaged_parts(std::string* damaged_parts) {
  if (damaged_parts != nullptr) {
    
  } else {
    
  }
  damaged_parts_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), damaged_parts);
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.AccidentDetails.damaged_parts)
}

// .nik_tutorial.InsuranceNumber insurances = 4;
inline bool AccidentDetails::_internal_has_insurances() const {
  return this != internal_default_instance() && insurances_ != nullptr;
}
inline bool AccidentDetails::has_insurances() const {
  return _internal_has_insurances();
}
inline void AccidentDetails::clear_insurances() {
  if (GetArenaNoVirtual() == nullptr && insurances_ != nullptr) {
    delete insurances_;
  }
  insurances_ = nullptr;
}
inline const ::nik_tutorial::InsuranceNumber& AccidentDetails::_internal_insurances() const {
  const ::nik_tutorial::InsuranceNumber* p = insurances_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nik_tutorial::InsuranceNumber*>(
      &::nik_tutorial::_InsuranceNumber_default_instance_);
}
inline const ::nik_tutorial::InsuranceNumber& AccidentDetails::insurances() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.AccidentDetails.insurances)
  return _internal_insurances();
}
inline ::nik_tutorial::InsuranceNumber* AccidentDetails::release_insurances() {
  // @@protoc_insertion_point(field_release:nik_tutorial.AccidentDetails.insurances)
  
  ::nik_tutorial::InsuranceNumber* temp = insurances_;
  insurances_ = nullptr;
  return temp;
}
inline ::nik_tutorial::InsuranceNumber* AccidentDetails::_internal_mutable_insurances() {
  
  if (insurances_ == nullptr) {
    auto* p = CreateMaybeMessage<::nik_tutorial::InsuranceNumber>(GetArenaNoVirtual());
    insurances_ = p;
  }
  return insurances_;
}
inline ::nik_tutorial::InsuranceNumber* AccidentDetails::mutable_insurances() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.AccidentDetails.insurances)
  return _internal_mutable_insurances();
}
inline void AccidentDetails::set_allocated_insurances(::nik_tutorial::InsuranceNumber* insurances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete insurances_;
  }
  if (insurances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      insurances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insurances, submessage_arena);
    }
    
  } else {
    
  }
  insurances_ = insurances;
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.AccidentDetails.insurances)
}

// -------------------------------------------------------------------

// IncidentSummary

// int32 total_expense = 1;
inline void IncidentSummary::clear_total_expense() {
  total_expense_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentSummary::_internal_total_expense() const {
  return total_expense_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentSummary::total_expense() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.IncidentSummary.total_expense)
  return _internal_total_expense();
}
inline void IncidentSummary::_internal_set_total_expense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_expense_ = value;
}
inline void IncidentSummary::set_total_expense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_expense(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.IncidentSummary.total_expense)
}

// -------------------------------------------------------------------

// Bike

// .nik_tutorial.BikeDetails details = 1;
inline bool Bike::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool Bike::has_details() const {
  return _internal_has_details();
}
inline void Bike::clear_details() {
  if (GetArenaNoVirtual() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::nik_tutorial::BikeDetails& Bike::_internal_details() const {
  const ::nik_tutorial::BikeDetails* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nik_tutorial::BikeDetails*>(
      &::nik_tutorial::_BikeDetails_default_instance_);
}
inline const ::nik_tutorial::BikeDetails& Bike::details() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.Bike.details)
  return _internal_details();
}
inline ::nik_tutorial::BikeDetails* Bike::release_details() {
  // @@protoc_insertion_point(field_release:nik_tutorial.Bike.details)
  
  ::nik_tutorial::BikeDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::nik_tutorial::BikeDetails* Bike::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::nik_tutorial::BikeDetails>(GetArenaNoVirtual());
    details_ = p;
  }
  return details_;
}
inline ::nik_tutorial::BikeDetails* Bike::mutable_details() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.Bike.details)
  return _internal_mutable_details();
}
inline void Bike::set_allocated_details(::nik_tutorial::BikeDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.Bike.details)
}

// .nik_tutorial.RideType ridetype = 2;
inline void Bike::clear_ridetype() {
  ridetype_ = 0;
}
inline ::nik_tutorial::RideType Bike::_internal_ridetype() const {
  return static_cast< ::nik_tutorial::RideType >(ridetype_);
}
inline ::nik_tutorial::RideType Bike::ridetype() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.Bike.ridetype)
  return _internal_ridetype();
}
inline void Bike::_internal_set_ridetype(::nik_tutorial::RideType value) {
  
  ridetype_ = value;
}
inline void Bike::set_ridetype(::nik_tutorial::RideType value) {
  _internal_set_ridetype(value);
  // @@protoc_insertion_point(field_set:nik_tutorial.Bike.ridetype)
}

// repeated .nik_tutorial.InsuranceNumber insurances = 3;
inline int Bike::_internal_insurances_size() const {
  return insurances_.size();
}
inline int Bike::insurances_size() const {
  return _internal_insurances_size();
}
inline void Bike::clear_insurances() {
  insurances_.Clear();
}
inline ::nik_tutorial::InsuranceNumber* Bike::mutable_insurances(int index) {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.Bike.insurances)
  return insurances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::InsuranceNumber >*
Bike::mutable_insurances() {
  // @@protoc_insertion_point(field_mutable_list:nik_tutorial.Bike.insurances)
  return &insurances_;
}
inline const ::nik_tutorial::InsuranceNumber& Bike::_internal_insurances(int index) const {
  return insurances_.Get(index);
}
inline const ::nik_tutorial::InsuranceNumber& Bike::insurances(int index) const {
  // @@protoc_insertion_point(field_get:nik_tutorial.Bike.insurances)
  return _internal_insurances(index);
}
inline ::nik_tutorial::InsuranceNumber* Bike::_internal_add_insurances() {
  return insurances_.Add();
}
inline ::nik_tutorial::InsuranceNumber* Bike::add_insurances() {
  // @@protoc_insertion_point(field_add:nik_tutorial.Bike.insurances)
  return _internal_add_insurances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::InsuranceNumber >&
Bike::insurances() const {
  // @@protoc_insertion_point(field_list:nik_tutorial.Bike.insurances)
  return insurances_;
}

// repeated .nik_tutorial.AccidentDetails reports = 4;
inline int Bike::_internal_reports_size() const {
  return reports_.size();
}
inline int Bike::reports_size() const {
  return _internal_reports_size();
}
inline void Bike::clear_reports() {
  reports_.Clear();
}
inline ::nik_tutorial::AccidentDetails* Bike::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.Bike.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::AccidentDetails >*
Bike::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:nik_tutorial.Bike.reports)
  return &reports_;
}
inline const ::nik_tutorial::AccidentDetails& Bike::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::nik_tutorial::AccidentDetails& Bike::reports(int index) const {
  // @@protoc_insertion_point(field_get:nik_tutorial.Bike.reports)
  return _internal_reports(index);
}
inline ::nik_tutorial::AccidentDetails* Bike::_internal_add_reports() {
  return reports_.Add();
}
inline ::nik_tutorial::AccidentDetails* Bike::add_reports() {
  // @@protoc_insertion_point(field_add:nik_tutorial.Bike.reports)
  return _internal_add_reports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::AccidentDetails >&
Bike::reports() const {
  // @@protoc_insertion_point(field_list:nik_tutorial.Bike.reports)
  return reports_;
}

// repeated .nik_tutorial.IncidentSummary expenses = 5;
inline int Bike::_internal_expenses_size() const {
  return expenses_.size();
}
inline int Bike::expenses_size() const {
  return _internal_expenses_size();
}
inline void Bike::clear_expenses() {
  expenses_.Clear();
}
inline ::nik_tutorial::IncidentSummary* Bike::mutable_expenses(int index) {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.Bike.expenses)
  return expenses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::IncidentSummary >*
Bike::mutable_expenses() {
  // @@protoc_insertion_point(field_mutable_list:nik_tutorial.Bike.expenses)
  return &expenses_;
}
inline const ::nik_tutorial::IncidentSummary& Bike::_internal_expenses(int index) const {
  return expenses_.Get(index);
}
inline const ::nik_tutorial::IncidentSummary& Bike::expenses(int index) const {
  // @@protoc_insertion_point(field_get:nik_tutorial.Bike.expenses)
  return _internal_expenses(index);
}
inline ::nik_tutorial::IncidentSummary* Bike::_internal_add_expenses() {
  return expenses_.Add();
}
inline ::nik_tutorial::IncidentSummary* Bike::add_expenses() {
  // @@protoc_insertion_point(field_add:nik_tutorial.Bike.expenses)
  return _internal_add_expenses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::IncidentSummary >&
Bike::expenses() const {
  // @@protoc_insertion_point(field_list:nik_tutorial.Bike.expenses)
  return expenses_;
}

// .google.protobuf.Timestamp last_updated = 6;
inline bool Bike::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool Bike::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bike::_internal_last_updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bike::last_updated() const {
  // @@protoc_insertion_point(field_get:nik_tutorial.Bike.last_updated)
  return _internal_last_updated();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bike::release_last_updated() {
  // @@protoc_insertion_point(field_release:nik_tutorial.Bike.last_updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bike::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    last_updated_ = p;
  }
  return last_updated_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bike::mutable_last_updated() {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.Bike.last_updated)
  return _internal_mutable_last_updated();
}
inline void Bike::set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:nik_tutorial.Bike.last_updated)
}

// -------------------------------------------------------------------

// WorkBook

// repeated .nik_tutorial.Bike bikes = 1;
inline int WorkBook::_internal_bikes_size() const {
  return bikes_.size();
}
inline int WorkBook::bikes_size() const {
  return _internal_bikes_size();
}
inline void WorkBook::clear_bikes() {
  bikes_.Clear();
}
inline ::nik_tutorial::Bike* WorkBook::mutable_bikes(int index) {
  // @@protoc_insertion_point(field_mutable:nik_tutorial.WorkBook.bikes)
  return bikes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::Bike >*
WorkBook::mutable_bikes() {
  // @@protoc_insertion_point(field_mutable_list:nik_tutorial.WorkBook.bikes)
  return &bikes_;
}
inline const ::nik_tutorial::Bike& WorkBook::_internal_bikes(int index) const {
  return bikes_.Get(index);
}
inline const ::nik_tutorial::Bike& WorkBook::bikes(int index) const {
  // @@protoc_insertion_point(field_get:nik_tutorial.WorkBook.bikes)
  return _internal_bikes(index);
}
inline ::nik_tutorial::Bike* WorkBook::_internal_add_bikes() {
  return bikes_.Add();
}
inline ::nik_tutorial::Bike* WorkBook::add_bikes() {
  // @@protoc_insertion_point(field_add:nik_tutorial.WorkBook.bikes)
  return _internal_add_bikes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nik_tutorial::Bike >&
WorkBook::bikes() const {
  // @@protoc_insertion_point(field_list:nik_tutorial.WorkBook.bikes)
  return bikes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nik_tutorial

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nik_tutorial::RideType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nik_tutorial::RideType>() {
  return ::nik_tutorial::RideType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_workbook_2eproto
