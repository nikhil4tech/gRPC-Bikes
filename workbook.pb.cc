// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workbook.proto

#include "workbook.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workbook_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccidentDetails_workbook_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workbook_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Bike_workbook_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workbook_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BikeDetails_workbook_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workbook_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidentSummary_workbook_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workbook_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsuranceNumber_workbook_2eproto;
namespace nik_tutorial {
class BikeDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BikeDetails> _instance;
} _BikeDetails_default_instance_;
class InsuranceNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsuranceNumber> _instance;
} _InsuranceNumber_default_instance_;
class AccidentDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccidentDetails> _instance;
} _AccidentDetails_default_instance_;
class IncidentSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncidentSummary> _instance;
} _IncidentSummary_default_instance_;
class BikeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bike> _instance;
} _Bike_default_instance_;
class WorkBookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkBook> _instance;
} _WorkBook_default_instance_;
}  // namespace nik_tutorial
static void InitDefaultsscc_info_AccidentDetails_workbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nik_tutorial::_AccidentDetails_default_instance_;
    new (ptr) ::nik_tutorial::AccidentDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nik_tutorial::AccidentDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccidentDetails_workbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccidentDetails_workbook_2eproto}, {
      &scc_info_InsuranceNumber_workbook_2eproto.base,}};

static void InitDefaultsscc_info_Bike_workbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nik_tutorial::_Bike_default_instance_;
    new (ptr) ::nik_tutorial::Bike();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nik_tutorial::Bike::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Bike_workbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Bike_workbook_2eproto}, {
      &scc_info_BikeDetails_workbook_2eproto.base,
      &scc_info_InsuranceNumber_workbook_2eproto.base,
      &scc_info_AccidentDetails_workbook_2eproto.base,
      &scc_info_IncidentSummary_workbook_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_BikeDetails_workbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nik_tutorial::_BikeDetails_default_instance_;
    new (ptr) ::nik_tutorial::BikeDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nik_tutorial::BikeDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BikeDetails_workbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BikeDetails_workbook_2eproto}, {}};

static void InitDefaultsscc_info_IncidentSummary_workbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nik_tutorial::_IncidentSummary_default_instance_;
    new (ptr) ::nik_tutorial::IncidentSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nik_tutorial::IncidentSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidentSummary_workbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IncidentSummary_workbook_2eproto}, {}};

static void InitDefaultsscc_info_InsuranceNumber_workbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nik_tutorial::_InsuranceNumber_default_instance_;
    new (ptr) ::nik_tutorial::InsuranceNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nik_tutorial::InsuranceNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsuranceNumber_workbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InsuranceNumber_workbook_2eproto}, {}};

static void InitDefaultsscc_info_WorkBook_workbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nik_tutorial::_WorkBook_default_instance_;
    new (ptr) ::nik_tutorial::WorkBook();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nik_tutorial::WorkBook::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkBook_workbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkBook_workbook_2eproto}, {
      &scc_info_Bike_workbook_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_workbook_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_workbook_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_workbook_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_workbook_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::BikeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::BikeDetails, name_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::BikeDetails, id_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::BikeDetails, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::InsuranceNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::InsuranceNumber, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::AccidentDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::AccidentDetails, date_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::AccidentDetails, location_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::AccidentDetails, damaged_parts_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::AccidentDetails, insurances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::IncidentSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::IncidentSummary, total_expense_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::Bike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::Bike, details_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::Bike, ridetype_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::Bike, insurances_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::Bike, reports_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::Bike, expenses_),
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::Bike, last_updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::WorkBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nik_tutorial::WorkBook, bikes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nik_tutorial::BikeDetails)},
  { 8, -1, sizeof(::nik_tutorial::InsuranceNumber)},
  { 14, -1, sizeof(::nik_tutorial::AccidentDetails)},
  { 23, -1, sizeof(::nik_tutorial::IncidentSummary)},
  { 29, -1, sizeof(::nik_tutorial::Bike)},
  { 40, -1, sizeof(::nik_tutorial::WorkBook)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nik_tutorial::_BikeDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nik_tutorial::_InsuranceNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nik_tutorial::_AccidentDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nik_tutorial::_IncidentSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nik_tutorial::_Bike_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nik_tutorial::_WorkBook_default_instance_),
};

const char descriptor_table_protodef_workbook_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016workbook.proto\022\014nik_tutorial\032\037google/p"
  "rotobuf/timestamp.proto\"6\n\013BikeDetails\022\014"
  "\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\r\n\005model\030\003 \001(\t\""
  "!\n\017InsuranceNumber\022\016\n\006number\030\001 \001(\t\"{\n\017Ac"
  "cidentDetails\022\014\n\004date\030\001 \001(\t\022\020\n\010location\030"
  "\002 \001(\t\022\025\n\rdamaged_parts\030\003 \001(\t\0221\n\ninsuranc"
  "es\030\004 \001(\0132\035.nik_tutorial.InsuranceNumber\""
  "(\n\017IncidentSummary\022\025\n\rtotal_expense\030\001 \001("
  "\005\"\242\002\n\004Bike\022*\n\007details\030\001 \001(\0132\031.nik_tutori"
  "al.BikeDetails\022(\n\010ridetype\030\002 \001(\0162\026.nik_t"
  "utorial.RideType\0221\n\ninsurances\030\003 \003(\0132\035.n"
  "ik_tutorial.InsuranceNumber\022.\n\007reports\030\004"
  " \003(\0132\035.nik_tutorial.AccidentDetails\022/\n\010e"
  "xpenses\030\005 \003(\0132\035.nik_tutorial.IncidentSum"
  "mary\0220\n\014last_updated\030\006 \001(\0132\032.google.prot"
  "obuf.Timestamp\"-\n\010WorkBook\022!\n\005bikes\030\001 \003("
  "\0132\022.nik_tutorial.Bike*/\n\010RideType\022\n\n\006STR"
  "EET\020\000\022\013\n\007CRUISER\020\001\022\n\n\006RACING\020\0022\210\002\n\tBikeG"
  "uide\022P\n\022GetInsuranceNumber\022\031.nik_tutoria"
  "l.BikeDetails\032\035.nik_tutorial.InsuranceNu"
  "mber\"\000\022U\n\021GetAccidentReport\022\035.nik_tutori"
  "al.InsuranceNumber\032\035.nik_tutorial.Accide"
  "ntDetails\"\0000\001\022R\n\016RecordIncident\022\035.nik_tu"
  "torial.AccidentDetails\032\035.nik_tutorial.In"
  "cidentSummary\"\000(\001BJ\n\024com.example.tutoria"
  "lB\016WorkBookProtos\252\002!Google.Protobuf.Exam"
  "ples.WorkBookb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_workbook_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_workbook_2eproto_sccs[6] = {
  &scc_info_AccidentDetails_workbook_2eproto.base,
  &scc_info_Bike_workbook_2eproto.base,
  &scc_info_BikeDetails_workbook_2eproto.base,
  &scc_info_IncidentSummary_workbook_2eproto.base,
  &scc_info_InsuranceNumber_workbook_2eproto.base,
  &scc_info_WorkBook_workbook_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_workbook_2eproto_once;
static bool descriptor_table_workbook_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workbook_2eproto = {
  &descriptor_table_workbook_2eproto_initialized, descriptor_table_protodef_workbook_2eproto, "workbook.proto", 1061,
  &descriptor_table_workbook_2eproto_once, descriptor_table_workbook_2eproto_sccs, descriptor_table_workbook_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_workbook_2eproto::offsets,
  file_level_metadata_workbook_2eproto, 6, file_level_enum_descriptors_workbook_2eproto, file_level_service_descriptors_workbook_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_workbook_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_workbook_2eproto), true);
namespace nik_tutorial {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_workbook_2eproto);
  return file_level_enum_descriptors_workbook_2eproto[0];
}
bool RideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BikeDetails::InitAsDefaultInstance() {
}
class BikeDetails::_Internal {
 public:
};

BikeDetails::BikeDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nik_tutorial.BikeDetails)
}
BikeDetails::BikeDetails(const BikeDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:nik_tutorial.BikeDetails)
}

void BikeDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BikeDetails_workbook_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

BikeDetails::~BikeDetails() {
  // @@protoc_insertion_point(destructor:nik_tutorial.BikeDetails)
  SharedDtor();
}

void BikeDetails::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BikeDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BikeDetails& BikeDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BikeDetails_workbook_2eproto.base);
  return *internal_default_instance();
}


void BikeDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:nik_tutorial.BikeDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* BikeDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "nik_tutorial.BikeDetails.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_model(), ptr, ctx, "nik_tutorial.BikeDetails.model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BikeDetails::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nik_tutorial.BikeDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nik_tutorial.BikeDetails.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // string model = 3;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nik_tutorial.BikeDetails.model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nik_tutorial.BikeDetails)
  return target;
}

size_t BikeDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nik_tutorial.BikeDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model = 3;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BikeDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nik_tutorial.BikeDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const BikeDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BikeDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nik_tutorial.BikeDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nik_tutorial.BikeDetails)
    MergeFrom(*source);
  }
}

void BikeDetails::MergeFrom(const BikeDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nik_tutorial.BikeDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void BikeDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nik_tutorial.BikeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BikeDetails::CopyFrom(const BikeDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nik_tutorial.BikeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BikeDetails::IsInitialized() const {
  return true;
}

void BikeDetails::InternalSwap(BikeDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BikeDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsuranceNumber::InitAsDefaultInstance() {
}
class InsuranceNumber::_Internal {
 public:
};

InsuranceNumber::InsuranceNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nik_tutorial.InsuranceNumber)
}
InsuranceNumber::InsuranceNumber(const InsuranceNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  // @@protoc_insertion_point(copy_constructor:nik_tutorial.InsuranceNumber)
}

void InsuranceNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsuranceNumber_workbook_2eproto.base);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InsuranceNumber::~InsuranceNumber() {
  // @@protoc_insertion_point(destructor:nik_tutorial.InsuranceNumber)
  SharedDtor();
}

void InsuranceNumber::SharedDtor() {
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsuranceNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsuranceNumber& InsuranceNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsuranceNumber_workbook_2eproto.base);
  return *internal_default_instance();
}


void InsuranceNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:nik_tutorial.InsuranceNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InsuranceNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_number(), ptr, ctx, "nik_tutorial.InsuranceNumber.number");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsuranceNumber::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nik_tutorial.InsuranceNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string number = 1;
  if (this->number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nik_tutorial.InsuranceNumber.number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nik_tutorial.InsuranceNumber)
  return target;
}

size_t InsuranceNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nik_tutorial.InsuranceNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string number = 1;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsuranceNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nik_tutorial.InsuranceNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const InsuranceNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsuranceNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nik_tutorial.InsuranceNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nik_tutorial.InsuranceNumber)
    MergeFrom(*source);
  }
}

void InsuranceNumber::MergeFrom(const InsuranceNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nik_tutorial.InsuranceNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
}

void InsuranceNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nik_tutorial.InsuranceNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsuranceNumber::CopyFrom(const InsuranceNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nik_tutorial.InsuranceNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsuranceNumber::IsInitialized() const {
  return true;
}

void InsuranceNumber::InternalSwap(InsuranceNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InsuranceNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccidentDetails::InitAsDefaultInstance() {
  ::nik_tutorial::_AccidentDetails_default_instance_._instance.get_mutable()->insurances_ = const_cast< ::nik_tutorial::InsuranceNumber*>(
      ::nik_tutorial::InsuranceNumber::internal_default_instance());
}
class AccidentDetails::_Internal {
 public:
  static const ::nik_tutorial::InsuranceNumber& insurances(const AccidentDetails* msg);
};

const ::nik_tutorial::InsuranceNumber&
AccidentDetails::_Internal::insurances(const AccidentDetails* msg) {
  return *msg->insurances_;
}
AccidentDetails::AccidentDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nik_tutorial.AccidentDetails)
}
AccidentDetails::AccidentDetails(const AccidentDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_location().empty()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  damaged_parts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_damaged_parts().empty()) {
    damaged_parts_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.damaged_parts_);
  }
  if (from._internal_has_insurances()) {
    insurances_ = new ::nik_tutorial::InsuranceNumber(*from.insurances_);
  } else {
    insurances_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nik_tutorial.AccidentDetails)
}

void AccidentDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccidentDetails_workbook_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  damaged_parts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insurances_ = nullptr;
}

AccidentDetails::~AccidentDetails() {
  // @@protoc_insertion_point(destructor:nik_tutorial.AccidentDetails)
  SharedDtor();
}

void AccidentDetails::SharedDtor() {
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  damaged_parts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete insurances_;
}

void AccidentDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccidentDetails& AccidentDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccidentDetails_workbook_2eproto.base);
  return *internal_default_instance();
}


void AccidentDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:nik_tutorial.AccidentDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  damaged_parts_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && insurances_ != nullptr) {
    delete insurances_;
  }
  insurances_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AccidentDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_date(), ptr, ctx, "nik_tutorial.AccidentDetails.date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_location(), ptr, ctx, "nik_tutorial.AccidentDetails.location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string damaged_parts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_damaged_parts(), ptr, ctx, "nik_tutorial.AccidentDetails.damaged_parts");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nik_tutorial.InsuranceNumber insurances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_insurances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccidentDetails::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nik_tutorial.AccidentDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date = 1;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nik_tutorial.AccidentDetails.date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date(), target);
  }

  // string location = 2;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nik_tutorial.AccidentDetails.location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location(), target);
  }

  // string damaged_parts = 3;
  if (this->damaged_parts().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_damaged_parts().data(), static_cast<int>(this->_internal_damaged_parts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nik_tutorial.AccidentDetails.damaged_parts");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_damaged_parts(), target);
  }

  // .nik_tutorial.InsuranceNumber insurances = 4;
  if (this->has_insurances()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::insurances(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nik_tutorial.AccidentDetails)
  return target;
}

size_t AccidentDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nik_tutorial.AccidentDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date = 1;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string location = 2;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string damaged_parts = 3;
  if (this->damaged_parts().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_damaged_parts());
  }

  // .nik_tutorial.InsuranceNumber insurances = 4;
  if (this->has_insurances()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insurances_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccidentDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nik_tutorial.AccidentDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const AccidentDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccidentDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nik_tutorial.AccidentDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nik_tutorial.AccidentDetails)
    MergeFrom(*source);
  }
}

void AccidentDetails::MergeFrom(const AccidentDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nik_tutorial.AccidentDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.damaged_parts().size() > 0) {

    damaged_parts_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.damaged_parts_);
  }
  if (from.has_insurances()) {
    _internal_mutable_insurances()->::nik_tutorial::InsuranceNumber::MergeFrom(from._internal_insurances());
  }
}

void AccidentDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nik_tutorial.AccidentDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccidentDetails::CopyFrom(const AccidentDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nik_tutorial.AccidentDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccidentDetails::IsInitialized() const {
  return true;
}

void AccidentDetails::InternalSwap(AccidentDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  damaged_parts_.Swap(&other->damaged_parts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(insurances_, other->insurances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccidentDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncidentSummary::InitAsDefaultInstance() {
}
class IncidentSummary::_Internal {
 public:
};

IncidentSummary::IncidentSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nik_tutorial.IncidentSummary)
}
IncidentSummary::IncidentSummary(const IncidentSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_expense_ = from.total_expense_;
  // @@protoc_insertion_point(copy_constructor:nik_tutorial.IncidentSummary)
}

void IncidentSummary::SharedCtor() {
  total_expense_ = 0;
}

IncidentSummary::~IncidentSummary() {
  // @@protoc_insertion_point(destructor:nik_tutorial.IncidentSummary)
  SharedDtor();
}

void IncidentSummary::SharedDtor() {
}

void IncidentSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncidentSummary& IncidentSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncidentSummary_workbook_2eproto.base);
  return *internal_default_instance();
}


void IncidentSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:nik_tutorial.IncidentSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  total_expense_ = 0;
  _internal_metadata_.Clear();
}

const char* IncidentSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_expense = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_expense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncidentSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nik_tutorial.IncidentSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_expense = 1;
  if (this->total_expense() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_expense(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nik_tutorial.IncidentSummary)
  return target;
}

size_t IncidentSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nik_tutorial.IncidentSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_expense = 1;
  if (this->total_expense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_expense());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidentSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nik_tutorial.IncidentSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const IncidentSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncidentSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nik_tutorial.IncidentSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nik_tutorial.IncidentSummary)
    MergeFrom(*source);
  }
}

void IncidentSummary::MergeFrom(const IncidentSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nik_tutorial.IncidentSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_expense() != 0) {
    _internal_set_total_expense(from._internal_total_expense());
  }
}

void IncidentSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nik_tutorial.IncidentSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncidentSummary::CopyFrom(const IncidentSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nik_tutorial.IncidentSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentSummary::IsInitialized() const {
  return true;
}

void IncidentSummary::InternalSwap(IncidentSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(total_expense_, other->total_expense_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidentSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bike::InitAsDefaultInstance() {
  ::nik_tutorial::_Bike_default_instance_._instance.get_mutable()->details_ = const_cast< ::nik_tutorial::BikeDetails*>(
      ::nik_tutorial::BikeDetails::internal_default_instance());
  ::nik_tutorial::_Bike_default_instance_._instance.get_mutable()->last_updated_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Bike::_Internal {
 public:
  static const ::nik_tutorial::BikeDetails& details(const Bike* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const Bike* msg);
};

const ::nik_tutorial::BikeDetails&
Bike::_Internal::details(const Bike* msg) {
  return *msg->details_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Bike::_Internal::last_updated(const Bike* msg) {
  return *msg->last_updated_;
}
void Bike::clear_last_updated() {
  if (GetArenaNoVirtual() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
Bike::Bike()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nik_tutorial.Bike)
}
Bike::Bike(const Bike& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      insurances_(from.insurances_),
      reports_(from.reports_),
      expenses_(from.expenses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_details()) {
    details_ = new ::nik_tutorial::BikeDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  if (from._internal_has_last_updated()) {
    last_updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  ridetype_ = from.ridetype_;
  // @@protoc_insertion_point(copy_constructor:nik_tutorial.Bike)
}

void Bike::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bike_workbook_2eproto.base);
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ridetype_) -
      reinterpret_cast<char*>(&details_)) + sizeof(ridetype_));
}

Bike::~Bike() {
  // @@protoc_insertion_point(destructor:nik_tutorial.Bike)
  SharedDtor();
}

void Bike::SharedDtor() {
  if (this != internal_default_instance()) delete details_;
  if (this != internal_default_instance()) delete last_updated_;
}

void Bike::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bike& Bike::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bike_workbook_2eproto.base);
  return *internal_default_instance();
}


void Bike::Clear() {
// @@protoc_insertion_point(message_clear_start:nik_tutorial.Bike)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  insurances_.Clear();
  reports_.Clear();
  expenses_.Clear();
  if (GetArenaNoVirtual() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  ridetype_ = 0;
  _internal_metadata_.Clear();
}

const char* Bike::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nik_tutorial.BikeDetails details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nik_tutorial.RideType ridetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ridetype(static_cast<::nik_tutorial::RideType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .nik_tutorial.InsuranceNumber insurances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insurances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nik_tutorial.AccidentDetails reports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nik_tutorial.IncidentSummary expenses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expenses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bike::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nik_tutorial.Bike)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nik_tutorial.BikeDetails details = 1;
  if (this->has_details()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::details(this), target, stream);
  }

  // .nik_tutorial.RideType ridetype = 2;
  if (this->ridetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ridetype(), target);
  }

  // repeated .nik_tutorial.InsuranceNumber insurances = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insurances_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_insurances(i), target, stream);
  }

  // repeated .nik_tutorial.AccidentDetails reports = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reports_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_reports(i), target, stream);
  }

  // repeated .nik_tutorial.IncidentSummary expenses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expenses_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_expenses(i), target, stream);
  }

  // .google.protobuf.Timestamp last_updated = 6;
  if (this->has_last_updated()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::last_updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nik_tutorial.Bike)
  return target;
}

size_t Bike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nik_tutorial.Bike)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nik_tutorial.InsuranceNumber insurances = 3;
  total_size += 1UL * this->_internal_insurances_size();
  for (const auto& msg : this->insurances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nik_tutorial.AccidentDetails reports = 4;
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nik_tutorial.IncidentSummary expenses = 5;
  total_size += 1UL * this->_internal_expenses_size();
  for (const auto& msg : this->expenses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nik_tutorial.BikeDetails details = 1;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // .google.protobuf.Timestamp last_updated = 6;
  if (this->has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  // .nik_tutorial.RideType ridetype = 2;
  if (this->ridetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ridetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bike::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nik_tutorial.Bike)
  GOOGLE_DCHECK_NE(&from, this);
  const Bike* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bike>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nik_tutorial.Bike)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nik_tutorial.Bike)
    MergeFrom(*source);
  }
}

void Bike::MergeFrom(const Bike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nik_tutorial.Bike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  insurances_.MergeFrom(from.insurances_);
  reports_.MergeFrom(from.reports_);
  expenses_.MergeFrom(from.expenses_);
  if (from.has_details()) {
    _internal_mutable_details()->::nik_tutorial::BikeDetails::MergeFrom(from._internal_details());
  }
  if (from.has_last_updated()) {
    _internal_mutable_last_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
  if (from.ridetype() != 0) {
    _internal_set_ridetype(from._internal_ridetype());
  }
}

void Bike::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nik_tutorial.Bike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bike::CopyFrom(const Bike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nik_tutorial.Bike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bike::IsInitialized() const {
  return true;
}

void Bike::InternalSwap(Bike* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  insurances_.InternalSwap(&other->insurances_);
  reports_.InternalSwap(&other->reports_);
  expenses_.InternalSwap(&other->expenses_);
  swap(details_, other->details_);
  swap(last_updated_, other->last_updated_);
  swap(ridetype_, other->ridetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bike::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkBook::InitAsDefaultInstance() {
}
class WorkBook::_Internal {
 public:
};

WorkBook::WorkBook()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nik_tutorial.WorkBook)
}
WorkBook::WorkBook(const WorkBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bikes_(from.bikes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nik_tutorial.WorkBook)
}

void WorkBook::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkBook_workbook_2eproto.base);
}

WorkBook::~WorkBook() {
  // @@protoc_insertion_point(destructor:nik_tutorial.WorkBook)
  SharedDtor();
}

void WorkBook::SharedDtor() {
}

void WorkBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkBook& WorkBook::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkBook_workbook_2eproto.base);
  return *internal_default_instance();
}


void WorkBook::Clear() {
// @@protoc_insertion_point(message_clear_start:nik_tutorial.WorkBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bikes_.Clear();
  _internal_metadata_.Clear();
}

const char* WorkBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nik_tutorial.Bike bikes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bikes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkBook::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nik_tutorial.WorkBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nik_tutorial.Bike bikes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bikes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_bikes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nik_tutorial.WorkBook)
  return target;
}

size_t WorkBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nik_tutorial.WorkBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nik_tutorial.Bike bikes = 1;
  total_size += 1UL * this->_internal_bikes_size();
  for (const auto& msg : this->bikes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nik_tutorial.WorkBook)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nik_tutorial.WorkBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nik_tutorial.WorkBook)
    MergeFrom(*source);
  }
}

void WorkBook::MergeFrom(const WorkBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nik_tutorial.WorkBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bikes_.MergeFrom(from.bikes_);
}

void WorkBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nik_tutorial.WorkBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkBook::CopyFrom(const WorkBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nik_tutorial.WorkBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkBook::IsInitialized() const {
  return true;
}

void WorkBook::InternalSwap(WorkBook* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bikes_.InternalSwap(&other->bikes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkBook::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nik_tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nik_tutorial::BikeDetails* Arena::CreateMaybeMessage< ::nik_tutorial::BikeDetails >(Arena* arena) {
  return Arena::CreateInternal< ::nik_tutorial::BikeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::nik_tutorial::InsuranceNumber* Arena::CreateMaybeMessage< ::nik_tutorial::InsuranceNumber >(Arena* arena) {
  return Arena::CreateInternal< ::nik_tutorial::InsuranceNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::nik_tutorial::AccidentDetails* Arena::CreateMaybeMessage< ::nik_tutorial::AccidentDetails >(Arena* arena) {
  return Arena::CreateInternal< ::nik_tutorial::AccidentDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::nik_tutorial::IncidentSummary* Arena::CreateMaybeMessage< ::nik_tutorial::IncidentSummary >(Arena* arena) {
  return Arena::CreateInternal< ::nik_tutorial::IncidentSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::nik_tutorial::Bike* Arena::CreateMaybeMessage< ::nik_tutorial::Bike >(Arena* arena) {
  return Arena::CreateInternal< ::nik_tutorial::Bike >(arena);
}
template<> PROTOBUF_NOINLINE ::nik_tutorial::WorkBook* Arena::CreateMaybeMessage< ::nik_tutorial::WorkBook >(Arena* arena) {
  return Arena::CreateInternal< ::nik_tutorial::WorkBook >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
